openapi: 3.0.0
info:
  title: My API
  version: 1.0.0
  description: API Documentation using Swagger with Express
paths:
  /api/tickets:
    get:
      description: Get all tickets
      responses:
        '200':
          description: Successfully retrieved tickets
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    title:
                      type: string
                    description:
                      type: string
                example:
                  - id: 1
                    title: Issue with login
                    description: User unable to log in to the system.
                  - id: 2
                    title: Error on payment page
                    description: Payment gateway shows error.
    post:
      description: Create a new ticket
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
              example:
                title: Login issue after password reset
                description: User cannot log in after resetting their password.
      responses:
        '201':
          description: Successfully created a ticket
        '400':
          description: Invalid request body
  /api/tickets/{id}:
    get:
      description: Get a specific ticket by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully retrieved the ticket
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  title:
                    type: string
                  description:
                    type: string
                example:
                  id: 1
                  title: Issue with login
                  description: User unable to log in to the system.
        '404':
          description: Ticket not found
    put:
      description: Update a specific ticket by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
              example:
                title: Updated Issue with login
                description: User still unable to log in after password reset.
      responses:
        '200':
          description: Ticket updated successfully
        '404':
          description: Ticket not found
    delete:
      description: Delete a specific ticket by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully deleted the ticket
        '404':
          description: Ticket not found
  /api/tickets/{id}/reply:
    post:
      description: Reply to a specific ticket by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reply:
                  type: string
              example:
                reply: We are looking into your issue and will update you soon.
      responses:
        '200':
          description: Successfully added the reply to the ticket
        '400':
          description: Invalid request body
        '404':
          description: Ticket not found
        '500':
          description: Internal server error
  /api/tickets/count:
    get:
      description: Get the total count of tickets
      responses:
        '200':
          description: Successfully retrieved ticket count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                example:
                  count: 42
  /api/users:
    post:
      description: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
              example:
                name: John Doe
                email: johndoe@example.com
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  email:
                    type: string
                example:
                  id: 1
                  name: John Doe
                  email: johndoe@example.com
    get:
      description: Get a user by ID
      responses:
        '200':
          description: Successfully retrieved user
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  email:
                    type: string
                example:
                  id: 1
                  name: John Doe
                  email: johndoe@example.com
  /api/users/{id}:
    get:
      description: Get a user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully retrieved user
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  email:
                    type: string
                example:
                  id: 1
                  name: John Doe
                  email: johndoe@example.com
    put:
      description: Update user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
              example:
                name: John Doe
                email: johndoe@example.com
      responses:
        '200':
          description: Successfully updated user
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  email:
                    type: string
                example:
                  id: 1
                  name: John Doe
                  email: johndoe@example.com
    delete:
      description: Delete user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User deleted successfully
        '404':
          description: User not found
components: {}
tags: []
